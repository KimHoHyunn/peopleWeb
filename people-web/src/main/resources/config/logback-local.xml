<configuration>
    <property name="LOG-HOME" value="d:/dev/logs/local"/>
    <property name="DEF-FILENAME" value="people"/>
    <property name="DEF-PATH" value="${LOG-HOME}/${DEF-FILENAME}"/>
    <property name="DEF-FILE" value="${DEF-PATH}/${DEF-FILENAME}.log"/>
    <property name="Console-PATTERN" value="[%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n"/>
    <property name="LOG-PATTERN" value="%d %p %c{1.} [%t] %m%n"/>
    
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                <!--%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n-->
                <pattern>${Console-PATTERN}</pattern>
            </Pattern>
        </layout>
    </appender>
    
    <appender name="FILE-ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${DEF-FILE}</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${DEF-PATH}/archived/${DEF-FILENAME}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>%d %p %c{1.} [%t] %m%n</pattern>
        </encoder>
    </appender>    
    <logger name="com.people" level="debug" additivity="false">
        <appender-ref ref="Console"/>
        <appender-ref ref="FILE-ROLLING"/>
    </logger>
    
    
    
    
    
    <property name="ASYNC-FILENAME" value="async"/>
    <property name="ASYNC-PATH" value="${LOG-HOME}/${DEF-FILENAME}/${ASYNC-FILENAME}"/>
    <property name="ASYNC-FILE" value="${ASYNC-PATH}/${DEF-FILENAME}_${ASYNC-FILENAME}.log"/>
    <appender name="FILE-ROLLING-ASYNC" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${ASYNC-FILE}</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${ASYNC-PATH}/archived/${DEF-FILENAME}_${ASYNC-FILENAME}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>
    <logger name="com.people.sample.async" level="debug" additivity="false">
        <appender-ref ref="Console"/>
        <appender-ref ref="FILE-ROLLING-ASYNC"/>
    </logger>
    
    
    <property name="JMS-FILENAME" value="jms"/>
    <property name="JMS-PATH" value="${LOG-HOME}/${DEF-FILENAME}/${JMS-FILENAME}"/>
    <property name="JMS-FILE" value="${JMS-PATH}/${DEF-FILENAME}_${JMS-FILENAME}.log"/>
    <appender name="FILE-ROLLING-JMS" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${JMS-FILE}</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${JMS-PATH}/archived/${DEF-FILENAME}_${JMS-FILENAME}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>
    <logger name="com.people.sample.jms" level="debug" additivity="false">
        <appender-ref ref="Console"/>
        <appender-ref ref="FILE-ROLLING-JMS"/>
    </logger>
    
    
    <property name="API-FILENAME" value="api"/>
    <property name="API-PATH" value="${LOG-HOME}/${DEF-FILENAME}/${API-FILENAME}"/>
    <property name="API-FILE" value="${API-PATH}/${DEF-FILENAME}_${API-FILENAME}.log"/>
    <appender name="FILE-ROLLING-API" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${API-FILE}</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${API-PATH}/archived/${DEF-FILENAME}_${API-FILENAME}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>   
    <logger name="com.people.sample.restapi" level="debug" additivity="false">
        <appender-ref ref="Console"/>
        <appender-ref ref="FILE-ROLLING-API"/>
    </logger> 
<!--
sqlonly	
	SQL을 로그로 남기며, Prepared Statement와 관련된 파라미터는 자동으로 변경되어 SQL을 출력합니다.
sqltiming	
	SQL과 SQL 실행 시간(milliseconds 단위)을 출력합니다.
audit	
	ResultSet을 제외한 모든 JDBC 호출 정보를 출력합니다.
	JDBC 관련 문제를 추적하는 경우를 제외하고는 사용이 권장되지 않습니다.
resultset	
	ResultSet을 포함한 모든 JDBC 호출 정보를 출력합니다.
resultsettable	
	SQL 조회 결과를 테이블 형태로 출력합니다.
connection	
	Connection의 연결과 종료에 관련된 로그를 출력합니다.
	커넥션 누수 문제 해결에 도움이 됩니다.
    <logger name="jdbc.sqlonly" level="INFO" appender-ref="Console" />
    <logger name="jdbc.resultsettable" level="INFO" appender-ref="Console" />
    <logger name="jdbc.audit" level="error" appender-ref="Console" />
    <logger name="jdbc.resultset" level="error" appender-ref="Console" />
    <logger name="jdbc.connection" level="error" appender-ref="Console" />
-->
    <!-- Log everything in Spring Boot -->
	<logger name="org.springframework.boot" level="info" additivity="false">
		<appender-ref ref="Console" />
	</logger>
      
    <!-- Log everything in Spring Core -->
	<logger name="org.springframework.core" level="info" additivity="false">
		<appender-ref ref="Console" />
	</logger>
  
    <!-- jdbc log -->
	<logger name="jdbc.sqlonly" level="error" additivity="false">
		<appender-ref ref="Console" />
	</logger>
	<logger name="jdbc.sqltiming" level="info" additivity="false">
		<appender-ref ref="Console" />
	</logger>
	<logger name="jdbc.audit" level="error" additivity="false">
		<appender-ref ref="Console" />
	</logger>
	<logger name="jdbc.resultset" level="error" additivity="false">
		<appender-ref ref="Console" />
	</logger>
	<!-- 로그로 데이터 결과값 보고 싶은 경우 info로 level 변경 -->
	<logger name="jdbc.resultsettable" level="error" additivity="false">
		<appender-ref ref="Console" />
	</logger>
	<logger name="jdbc.connection" level="error" additivity="false">
		<appender-ref ref="Console" />
	</logger>

    

    <root level="info">
        <appender-ref ref="Console"/>
        <appender-ref ref="FILE-ROLLING"/>
        <!-- 이걸 주석 처리하니까 logger에서 정의된 패키지가 실행되는 실행로그만 쌓임. 신기하네~
        <appender-ref ref="FILE-ROLLING-SAMPLE"/>
        <appender-ref ref="FILE-ROLLING-SAMPLE2"/>
        -->
    </root>

</configuration>